# Generated by Django 4.2.5 on 2023-09-07 10:47

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import location_field.models.plain
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='GPStracker',
            fields=[
                ('trackerID', models.CharField(max_length=100, primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='Sensor',
            fields=[
                ('sensorID', models.CharField(max_length=100, primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='Vehicle',
            fields=[
                ('VIN', models.CharField(max_length=10, primary_key=True, serialize=False)),
                ('model', models.CharField(max_length=150)),
                ('tank_capacity', models.IntegerField(default=0)),
                ('fuel_type', models.CharField(choices=[('P', 'PETROL'), ('D', 'DIESEL')], max_length=1)),
                ('sensorID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sensor_implemented', to='monitor.sensor')),
                ('trackerID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tracker_implemented', to='monitor.gpstracker')),
            ],
        ),
        migrations.CreateModel(
            name='SensorReading',
            fields=[
                ('readingID', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('volume', models.PositiveIntegerField()),
                ('sensorID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='readings', to='monitor.sensor')),
            ],
        ),
        migrations.CreateModel(
            name='SensorCallibration',
            fields=[
                ('callibrationID', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('litres', models.PositiveBigIntegerField()),
                ('volt', models.PositiveSmallIntegerField()),
                ('sensorID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='callibrations', to='monitor.sensor')),
            ],
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('locationID', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('coordinates', location_field.models.plain.PlainLocationField(max_length=63)),
                ('trackerID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='locations', to='monitor.gpstracker')),
            ],
        ),
        migrations.CreateModel(
            name='Generator',
            fields=[
                ('serialnumber', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('tank_capacity', models.IntegerField(default=0)),
                ('fuel_type', models.CharField(choices=[('P', 'PETROL'), ('D', 'DIESEL')], max_length=1)),
                ('sensorID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sensor_it_contain', to='monitor.sensor')),
                ('trackerID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tracker_it_contain', to='monitor.gpstracker')),
            ],
        ),
        migrations.CreateModel(
            name='FuelRecord',
            fields=[
                ('recordID', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('date', models.DateField(auto_now_add=True)),
                ('time', models.TimeField(auto_now_add=True)),
                ('fuel_level', models.IntegerField()),
                ('generator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='fuel_records_generator', to='monitor.generator')),
                ('vehicle', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='fuel_records_vehicle', to='monitor.vehicle')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('userID', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('role', models.CharField(choices=[('ADMIN', 'ADMIN'), ('OWNER', 'OWNER')], max_length=10)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
